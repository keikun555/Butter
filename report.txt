Signals are everywhere—the light we see, the sounds we hear, even the thoughts we think are types of signals.  This makes signals important for us to understand the inner workings of the world, as signals enable us to relay information from places we can't tangibly access, for example, the composition of a star millions of light years away.  However, in the real world, measuring only one type of signal is extremely difficult, as the signals are often distorted, corrupted, or polluted with unwanted signals.  This is why we came up with a way of filtering out these unwanted signals, which came to be known as the field of signal processing.  300 years later, in the Summer of 2017 at University of Washington, I have implemented a real time Butterworth type infinite impulse response (IIR) filter that could filter out any unwanted frequencies in a signal just by specifying the minimum conditions.

This project was implemented as the butterworth package in Python—which is known for its convenience but slowness.  Because Python is so slow, it was certainly difficult to develop a real time signal processing package, as the first time I tested the speed of the filter, the filter was only capable of processing 1 kHz of data.  That was not enough for applications of signal processing, for example, audio signal processing, which usually uses signals above 44 kHz.  Thankfully, by using Numba, a Just-in-Time (JIT) compiler library, and also by utilizing arrays from Numpy instead of Python dictionaries, I was able to increase the speed of the filtering by more than 250 times its original speed.  With this experience, I learned the importance of working with right data structures and libraries to achieve the most optimal results.

With the Python package now in production, I was able to create more Python packages that depend upon and apply the butterworth package.  One of them is the WAVFilter, which one can use it to filter signals from wave format audio files.  Another is PyEQ, which uses the real-time property of the butterworth package.  PyEQ is a graphic user interface (GUI) designed to help users grasp the understanding of digital signal filters by letting the users change the filter conditions interactively while the audio signals run in real-time.  The users can record their audio of choice, or feed the program a wave format audio file, and run the audio in loops while incrementally changing what frequencies to pass or stop from the signals.

In all, the experience at University of Washington 
